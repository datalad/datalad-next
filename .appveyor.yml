# This CI setup provides a largely homogeneous configuration across all
# major platforms (Windows, MacOS, and Linux). The aim of this test setup is
# to create a "native" platform experience, using as few cross-platform
# helper tools as possible.
#
# On Linux/Mac a virtualenv is used for testing. The effective virtual env
# is available under ~/VENV.
#
# All workers support remote login. Login details are shown at the top of each
# CI run log.
#
# - Linux/Mac workers (via SSH):
#
#   - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#     variable (via the appveyor project settings)
#
#   - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
#   - Login with:
#
#     ssh -o StrictHostKeyChecking=no <LOGIN>
#
#   - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#     user HOME directory (current directory directly after login). The session
#     will run until the file is removed (or 60 min have passed)
#
# - Windows workers (via RDP):
#
#   - An RDP password should be defined in an APPVEYOR_RDP_PASSWORD environment
#     variable (via the appveyor project settings), or a random password is used
#     every time
#
#   - RDP login info is given in the form of IP:PORT
#
#   - Login with:
#
#     xfreerdp /cert:ignore /dynamic-resolution /u:appveyor /p:<PASSWORD> /v:<LOGIN>
#
#   - to prevent the CI run from exiting, create a textfile named `BLOCK` on the
#     Desktop (a required .txt extension will be added automatically). The session
#     will run until the file is removed (or 60 min have passed)
#
#   - in a terminal execute, for example, `C:\datalad_debug.bat 39` to set up the
#     environment to debug in a Python 3.8 session (should generally match the
#     respective CI run configuration).


# do not make repository clone cheap: interfers with versioneer
shallow_clone: false


environment:
  # we do not have an adequate setup for SSH-based tests right now
  #DATALAD_TESTS_SSH: 1

  # Do not use `image` as a matrix dimension, to have fine-grained control over
  # what tests run on which platform
  # The ID variable had no impact, but sorts first in the CI run overview
  # an intelligible name can help to locate a specific test run
  matrix:
    # List a CI run for each platform first, to have immediate access when there
    # is a need for debugging

    # Ubuntu core tests
    - ID: Ubu20
      DTS: datalad_next
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
      DEPLOY_HTTPBIN_IMAGE: yes
    # Windows core tests
    - ID: WinP39core
      # ~35 min
      DTS: datalad_next
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      # Python version specification is non-standard on windows
      PY: 39-x64
      INSTALL_GITANNEX: git-annex -m datalad/packages
    # MacOS core tests
    - ID: MacP38core
      DTS: datalad_next
      APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      PY: 3.8
      INSTALL_GITANNEX: git-annex
      DATALAD_LOCATIONS_SOCKETS: /Users/appveyor/DLTMP/sockets
      CODECOV_BINARY: https://uploader.codecov.io/latest/macos/codecov

    # run a subset of the core tests on the oldest supported Python version
    - ID: CORE1
      DTS: >
        datalad.cli
        datalad.core
      # do not run tests that ensure behavior we intentionally changed
      # - test_gh1811: is included in next in an alternative implementation
      KEYWORDS: not test_gh1811
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      PY: 3.7
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
    - ID: CORE2
      DTS: >
        datalad.customremotes
        datalad.dataset
        datalad.distributed
        datalad.downloaders
        datalad.interface
      # do not run tests that ensure behavior we intentionally changed
      # - test_gh1811: is included in next in an alternative implementation
      KEYWORDS: not test_gh1811
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      PY: 3.7
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
    - ID: CORE3
      DTS: >
        datalad.distribution
      KEYWORDS: not test_invalid_args
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      PY: 3.7
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
    - ID: CORE4
      DTS: >
        datalad.local
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      PY: 3.7
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov
    - ID: CORE5
      DTS: >
        datalad.runner
        datalad.support
        datalad.tests
        datalad.ui
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      PY: 3.7
      INSTALL_SYSPKGS: python3-virtualenv
      # datalad-annex git remote needs something after git-annex_8.20211x
      INSTALL_GITANNEX: git-annex -m snapshot
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov

matrix:
  allow_failures:
    - KNOWN2FAIL: 1

# do not run the CI if only documentation changes were made
# documentation builds are tested elsewhere and cheaper
skip_commits:
  files:
    - docs/
    - changelog.d/
    - .github/
    - CHANGELOG.md
    - CITATION.cff
    - CONTRIBUTORS
    - LICENSE
    - Makefile
    - README.md
    - readthedocs.yml


# it is OK to specify paths that may not exist for a particular test run
cache:
  # pip cache
  - C:\Users\appveyor\AppData\Local\pip\Cache -> .appveyor.yml
  - /home/appveyor/.cache/pip -> .appveyor.yml
  # TODO: where is the cache on macOS?
  #- /Users/appveyor/.cache/pip -> .appveyor.yml
  # TODO: Can we cache `brew`?
  #- /usr/local/Cellar
  #- /usr/local/bin
  # cache the docker image for httpbin. in 2023 it has not changed in
  # 4 years, not worth pulling each time
  # given the low change frequency we also do not invalidate the cache
  # but would do manually, if needed
  - /home/appveyor/cache/httpbin.dockerimg
  - C:\Users\appveyor\httpbin.dockerimg


# turn of support for MS project build support (not needed)
build: off


# init cannot use any components from the repo, because it runs prior to
# cloning it
init:
  # remove windows 260-char limit on path names
  - cmd: powershell Set-Itemproperty -path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name LongPathsEnabled -value 1
  # enable developer mode on windows
  # this should enable mklink without admin privileges, but it doesn't seem to work
  #- cmd: powershell tools\ci\appveyor_enable_windevmode.ps1
  # enable RDP access on windows (RDP password is in appveyor project config)
  # this is relatively expensive (1-2min), but very convenient to jump into any build at any time
  - cmd: powershell.exe iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  # Identity setup
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"
  # enable "next" extension for patching datalad core
  - git config --global datalad.extensions.load next
  # Scratch space
  - cmd: md C:\DLTMP
  # we place the "unix" one into the user's HOME to avoid git-annex issues on MacOSX
  # gh-5291
  - sh: mkdir ~/DLTMP
  # and use that scratch space to get short paths in test repos
  # (avoiding length-limits as much as possible)
  - cmd: "set TMP=C:\\DLTMP"
  - cmd: "set TEMP=C:\\DLTMP"
  - sh: export TMPDIR=~/DLTMP

install:
  # enable external SSH access to CI worker on all other systems
  # needs APPVEYOR_SSH_KEY defined in project settings (or environment)
  - sh: tools/appveyor/enable-ssh-login
  # place a debug setup helper at a convenient location
  - cmd: copy tools\appveyor\env_setup.bat C:\\datalad_debug.bat
  # Missing system software
  - sh: tools/appveyor/install-syspkgs $INSTALL_SYSPKGS
  # If a particular Python version is requested, use env setup (using the
  # appveyor provided environments/installation). Note, these are broken
  # on the ubuntu images
  # https://help.appveyor.com/discussions/problems/28217-appveyor-ubunu-image-with-python3-lzma-module
  # Otherwise create a virtualenv using the default Python 3, to enable uniform
  # use of python/pip executables below
  - sh: "[ \"x$PY\" != x ] && . ${HOME}/venv${PY}/bin/activate || virtualenv -p 3 ${HOME}/dlvenv && . ${HOME}/dlvenv/bin/activate; ln -s \"$VIRTUAL_ENV\" \"${HOME}/VENV\""
  - cmd: "set PATH=C:\\Python%PY%;C:\\Python%PY%\\Scripts;%PATH%"
  # deploy the datalad installer, override version via DATALAD_INSTALLER_VERSION
  - cmd:
      IF DEFINED DATALAD_INSTALLER_VERSION (
      python -m pip install "datalad-installer%DATALAD_INSTALLER_VERSION%"
      ) ELSE (
      python -m pip install datalad-installer
      )
  # Install git-annex on windows, otherwise INSTALL_SYSPKGS can be used
  # deploy git-annex, if desired
  - cmd: IF DEFINED INSTALL_GITANNEX datalad-installer --sudo ok %INSTALL_GITANNEX%
  - sh: tools/appveyor/install-git-annex ${INSTALL_GITANNEX}
  # enable the git-annex provisioned by the installer
  - "[ -f ${HOME}/dlinstaller_env.sh ] && . ${HOME}/dlinstaller_env.sh || true"
  # HTTPBIN
  - sh: "[ -n \"$DEPLOY_HTTPBIN_IMAGE\" ] && tools/appveyor/docker-load-httpbin || true"


#before_build:
#


build_script:
  - python -m pip install -r requirements-devel.txt
  - python -m pip install .


#after_build:
#


before_test:
  # simple call to see if datalad and git-annex are installed properly
  - datalad wtf


test_script:
  # run tests on installed module, not source tree files
  - cmd: md __testhome__
  - sh: mkdir __testhome__
  - cd __testhome__
    # run test selecion (--traverse-namespace needed from Python 3.8 onwards)
  - cmd: python -m pytest -s -v -m "not (turtle)" -k "%KEYWORDS%" --cov=datalad_next --pyargs %DTS%
    # also add --cov datalad, because some core test runs may not touch -next code
  - sh:  PATH=$PWD/../tools/coverage-bin:$PATH python -m pytest -s -v -m "not (turtle)" -k "$KEYWORDS" --cov=datalad_next --cov datalad --pyargs ${DTS}


after_test:
  - sh: ../tools/appveyor/submit-coverage
  - cmd: ..\tools\appveyor\submit-coverage.bat


#on_success:
#


#on_failure:
#


on_finish:
  # conditionally block the exit of a CI run for direct debugging
  - sh: while [ -f ~/BLOCK ]; do sleep 5; done
  - cmd: powershell.exe while ((Test-Path "C:\Users\\appveyor\\Desktop\\BLOCK.txt")) { Start-Sleep 5 }
